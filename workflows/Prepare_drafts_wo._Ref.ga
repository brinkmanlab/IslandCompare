{"uuid": "3f333059-9b02-4757-9ba0-00649bf4fa5e", "tags": [], "format-version": "0.1", "name": "Prepare drafts wo. Ref", "version": 7, "steps": {"0": {"tool_id": null, "tool_version": null, "outputs": [], "workflow_outputs": [{"output_name": "output", "uuid": "f27787cc-95c7-43fe-987d-28decf4614b3", "label": null}], "input_connections": {}, "tool_state": "{\"collection_type\": \"list\"}", "id": 0, "uuid": "609a674c-c9e9-4793-a2dc-70564995ada3", "errors": null, "name": "Input dataset collection", "label": "Raw user input", "inputs": [], "position": {"top": 540.8333129882812, "left": 242}, "annotation": "", "content_id": null, "type": "data_collection_input"}, "1": {"tool_id": "biopython-convert", "tool_version": "1.0", "outputs": [{"type": "input", "name": "split_output"}, {"type": "txt", "name": "output"}], "workflow_outputs": [], "input_connections": {"input": {"output_name": "output", "id": 0}}, "tool_state": "{\"__page__\": null, \"__rerun_remap_job_id__\": null, \"split\": \"\\\"false\\\"\", \"query\": \"\\\"[?!(features[?type==`source`].qualifiers.plasmid)]\\\"\", \"input\": \"{\\\"__class__\\\": \\\"ConnectedValue\\\"}\", \"output_type\": \"\\\"fasta\\\"\"}", "id": 1, "uuid": "94213232-db4d-4c2a-ae60-2ed62d79f008", "errors": null, "name": "BioPython SeqIO Converter", "post_job_actions": {"RenameDatasetActionsplit_output": {"output_name": "split_output", "action_type": "RenameDatasetAction", "action_arguments": {"newname": "Split from #{input}"}}, "HideDatasetActionsplit_output": {"output_name": "split_output", "action_type": "HideDatasetAction", "action_arguments": {}}, "HideDatasetActionoutput": {"output_name": "output", "action_type": "HideDatasetAction", "action_arguments": {}}}, "label": "To fasta", "inputs": [], "position": {"top": 265, "left": 596.1666870117188}, "annotation": "", "content_id": "biopython-convert", "type": "tool"}, "2": {"tool_id": "biopython-convert", "tool_version": "1.0", "outputs": [{"type": "input", "name": "split_output"}, {"type": "txt", "name": "output"}], "workflow_outputs": [], "input_connections": {"input": {"output_name": "output", "id": 0}}, "tool_state": "{\"__page__\": null, \"__rerun_remap_job_id__\": null, \"split\": \"\\\"false\\\"\", \"query\": \"\\\"[?!(features[?type==`source`].qualifiers.plasmid)]\\\"\", \"input\": \"{\\\"__class__\\\": \\\"ConnectedValue\\\"}\", \"output_type\": \"\\\"gff3\\\"\"}", "id": 2, "uuid": "e924966b-f07b-4a26-ac35-5acc0d25339e", "errors": null, "name": "BioPython SeqIO Converter", "post_job_actions": {"HideDatasetActionsplit_output": {"output_name": "split_output", "action_type": "HideDatasetAction", "action_arguments": {}}, "HideDatasetActionoutput": {"output_name": "output", "action_type": "HideDatasetAction", "action_arguments": {}}}, "label": "To GFF", "inputs": [], "position": {"top": 746, "left": 601.1666870117188}, "annotation": "", "content_id": "biopython-convert", "type": "tool"}, "3": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_awk_tool/1.1.1", "tool_version": "1.1.1", "outputs": [{"type": "input", "name": "outfile"}], "workflow_outputs": [{"output_name": "outfile", "uuid": "e2a17c84-da67-43a7-a115-17a3be007fad", "label": "Stitched fasta"}], "input_connections": {"infile": {"output_name": "output", "id": 1}}, "tool_state": "{\"__page__\": null, \"code\": \"\\\"#!/usr/bin/env -S gawk -f \\\\n# Stitch input multi-fastas in order, padding with 'N'.\\\\n\\\\nBEGIN {\\\\n    #Schedule inputs for two passes\\\\n    ARGV[ARGC] = \\\\\\\"pass=sequence\\\\\\\";\\\\n    for (i=1; i<ARGC; ++i)\\\\n        ARGV[ARGC+i] = ARGV[i]\\\\n    ARGC = (ARGC-1) * 2 + 2;\\\\n\\\\n    pass = \\\\\\\"annotations\\\\\\\";\\\\n    FS=\\\\\\\" \\\\\\\"; # Use for parsing fasta header\\\\n    pos=1; # 1-index of stitched sequence\\\\n}\\\\n\\\\nBEGINFILE {\\\\n    first=1;\\\\n    quality=0;\\\\n    if (!stitched_id) {\\\\n        stitched_id = FILENAME;\\\\n        # get basename of FILENAME\\\\n        sub(/^.*\\\\\\\\//, \\\\\\\"\\\\\\\", stitched_id);\\\\n        #sub(/\\\\\\\\.[^.]*$/, \\\\\\\"\\\\\\\", stitched_id);\\\\n        # spaces have special meaning in fasta\\\\n        gsub(\\\\\\\" \\\\\\\", \\\\\\\"_\\\\\\\", stitched_id);\\\\n    }\\\\n    \\\\n    OFS=\\\\\\\"\\\\\\\\t\\\\\\\";\\\\n    ORS=\\\\\\\"\\\\\\\\n\\\\\\\";\\\\n    if (pass == \\\\\\\"annotations\\\\\\\") {\\\\n        print \\\\\\\"##gff-version 3\\\\\\\";\\\\n        OFS=\\\\\\\"\\\\\\\\t\\\\\\\";\\\\n        ORS=\\\\\\\"\\\\\\\\n\\\\\\\";\\\\n    } else if (pass == \\\\\\\"sequence\\\\\\\") {\\\\n        print \\\\\\\"##FASTA\\\\\\\";\\\\n        print \\\\\\\">\\\\\\\" stitched_id;\\\\n        ORS=\\\\\\\"\\\\\\\";\\\\n        OFS=\\\\\\\"\\\\\\\";\\\\n    }\\\\n}\\\\n\\\\n# Reset quality state\\\\n/^>/ {\\\\n    quality=0;\\\\n}\\\\n\\\\n# Store sequence information\\\\npass == \\\\\\\"annotations\\\\\\\" && /^>/ {\\\\n    if (current_id) {\\\\n        # Output record\\\\n        print stitched_id, \\\\\\\"stitch.gawk\\\\\\\", \\\\\\\"contig\\\\\\\", start, pos-1, \\\\\\\".\\\\\\\", \\\\\\\".\\\\\\\", \\\\\\\".\\\\\\\", \\\\\\\"ID=\\\\\\\"current_id;\\\\n    }\\\\n    current_id=substr($1, 2);\\\\n    if (first) {\\\\n        first=0;\\\\n    } else {\\\\n        pos += ENVIRON[\\\\\\\"padding_length\\\\\\\"];\\\\n    }\\\\n    start = pos;\\\\n    next;\\\\n}\\\\n\\\\npass == \\\\\\\"annotations\\\\\\\" && !quality {\\\\n    pos += length();\\\\n}\\\\n\\\\n# Output sequence\\\\npass == \\\\\\\"sequence\\\\\\\" && /^>/ {\\\\n    if (first) {\\\\n        first=0;\\\\n    } else {\\\\n        for (i = 0; i < ENVIRON[\\\\\\\"padding_length\\\\\\\"]; ++i)\\\\n            if (pass == \\\\\\\"sequence\\\\\\\")\\\\n                print \\\\\\\"N\\\\\\\";\\\\n    }\\\\n    next;\\\\n}\\\\n\\\\n# Default print if not quality lines\\\\npass == \\\\\\\"sequence\\\\\\\" && !quality {\\\\n    print;\\\\n}\\\\n\\\\n# Allow for fastq input\\\\n/^+/ { quality=1; next }\\\\n\\\\nENDFILE {\\\\n    pass = next_pass[pass]\\\\n    if (pass) {\\\\n        # Set next file to this one for second pass\\\\n\\\\n        \\\\n    }\\\\n}\\\"\", \"last\": \"\\\"false\\\"\", \"infiles\": \"[]\", \"envs\": \"[{\\\"__index__\\\": 0, \\\"name\\\": \\\"padding_length\\\", \\\"val\\\": \\\"1000\\\"}]\", \"__rerun_remap_job_id__\": null, \"infile\": \"{\\\"__class__\\\": \\\"ConnectedValue\\\"}\"}", "id": 3, "tool_shed_repository": {"owner": "bgruening", "changeset_revision": "a6f147a050a2", "name": "text_processing", "tool_shed": "toolshed.g2.bx.psu.edu"}, "uuid": "9c7fa1c2-e5e2-41c0-aeb6-0be236ed4377", "errors": null, "name": "Text reformatting", "post_job_actions": {"ChangeDatatypeActionoutfile": {"output_name": "outfile", "action_type": "ChangeDatatypeAction", "action_arguments": {"newtype": "fasta"}}, "RenameDatasetActionoutfile": {"output_name": "outfile", "action_type": "RenameDatasetAction", "action_arguments": {"newname": "Genomes stiched in order"}}}, "label": "Stitch in order", "inputs": [], "position": {"top": 378.16668701171875, "left": 958.1666259765625}, "annotation": "", "content_id": "toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_awk_tool/1.1.1", "type": "tool"}, "4": {"tool_id": "feature_merge", "tool_version": "1.0", "outputs": [{"type": "gff", "name": "output"}], "workflow_outputs": [{"output_name": "output", "uuid": "3cbd7ede-db03-4cd3-9aba-3b06d729bbcc", "label": "All input annotations"}], "input_connections": {"inputs": {"output_name": "output", "id": 2}}, "tool_state": "{\"ignore_strand\": \"\\\"false\\\"\", \"inputs\": \"{\\\"__class__\\\": \\\"ConnectedValue\\\"}\", \"features\": \"[]\", \"__page__\": null, \"exact_only\": \"\\\"true\\\"\", \"__rerun_remap_job_id__\": null, \"exclude_components\": \"\\\"false\\\"\"}", "id": 4, "uuid": "7b64a048-b666-418b-872c-93459ce67087", "errors": null, "name": "GFF/GTF Feature Merge", "post_job_actions": {"RenameDatasetActionoutput": {"output_name": "output", "action_type": "RenameDatasetAction", "action_arguments": {"newname": "Input annotations"}}}, "label": "Merge all features into single file", "inputs": [], "position": {"top": 789, "left": 930.6666259765625}, "annotation": "", "content_id": "feature_merge", "type": "tool"}}, "annotation": "", "a_galaxy_workflow": "true"}